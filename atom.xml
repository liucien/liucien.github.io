<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liucien.github.io</id>
    <title>Gridea</title>
    <updated>2021-03-30T16:34:09.210Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liucien.github.io"/>
    <link rel="self" href="https://liucien.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://liucien.github.io/images/avatar.png</logo>
    <icon>https://liucien.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Koa + MongoDB开发CMS内容管理系统学习记录]]></title>
        <id>https://liucien.github.io/post/koa-mongodb-kai-fa-cms-nei-rong-guan-li-xi-tong-xue-xi-ji-lu/</id>
        <link href="https://liucien.github.io/post/koa-mongodb-kai-fa-cms-nei-rong-guan-li-xi-tong-xue-xi-ji-lu/">
        </link>
        <updated>2019-06-21T14:31:48.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-学习目的">一、学习目的</h2>
<p>个人学习项目，该下项目视频来源于<a href="https://www.itying.com/goods-800.html">IT营</a>，此项目主要示范如何使用koa搭建后端项目，并使用mongoDB作为数据存储，并完成增删改查。<a href="https://github.com/liucien/CMS-koa">demo地址</a>，主要以node.js学习为主，前端使用的art模板。</p>
<h2 id="二-目录结构">二、目录结构</h2>
<p>├── models                  数据库模型目录<br>
│   ├── config.js           数据库链接配置<br>
│   ├── db.js                 实例化连接数据库<br>
│   └── tools.js             工具函数<br>
├── routes                    应用路由目录<br>
│   ├── admin               业务逻辑<br>
│   ├── admin.js<br>
│   ├── api.js<br>
│   └── index.js<br>
├── public                  静态资源<br>
├── views                   视图<br>
│   ├── admin             后台页面<br>
│   └── default            前端页面<br>
├── app.js                应用主文件<br>
├── package.json<br>
└── package-lock.json</p>
<h2 id="三-主要模块">三、主要模块</h2>
<h3 id="1-art-template-koa-art-template">1、art-template 、koa-art-template</h3>
<p>模板引擎</p>
<pre><code class="language-js">const render = require('koa-art-template');
//配置模板引擎
render(app, {
    root: path.join(__dirname, 'views'),
    extname: '.html',
    debug: process.env.NODE_ENV !== 'production',
    dateFormat:dateFormat=function(value){
        //设置日期格式
        return sd.format(new Date(value), 'YYYY-MM-DD HH:mm');
    } /*扩展模板里面的方法*/
});
</code></pre>
<h3 id="2-koa-router">2、koa-router</h3>
<p>路由处理模块，koa-router是koa的路由处理中间件，请求示例</p>
<pre><code class="language-js">const router = require('koa-router')();

router.get('/', async ctx =&gt; {
    ctx.body = {
        success:true,
        message:'请求成功'
    }
});
//post请求
router.post('/testPost',async ctx =&gt; {
    ctx.body = {
        success:true,
        message:'请求成功'
    }
});
//put请求
router.put('/testPost',async ctx =&gt; {
    ctx.body = {
        success:true,
        message:'请求成功'
    }
});
//delete请求
router.delete('/testPost',async ctx =&gt; {
    ctx.body = {
        success:true,
        message:'请求成功'
    }
});
</code></pre>
<h3 id="3-koa-bodyparser">3、koa-bodyparser</h3>
<p>使用koa-bodyparser解析post请求发送的body内容：</p>
<pre><code class="language-js">const bodyParser = require('koa-bodyparser');
app.use(bodyParser());
</code></pre>
<h3 id="4-koa-static">4、koa-static</h3>
<p>koa-static是koa的一个静态资源处理中间件，一般用它指定项目中的某个目录为静态资源目录</p>
<pre><code class="language-js">const static = require('koa-static');
//配置静态资源中间件
// app.use(static('.'));//不安全形式
app.use(static(__dirname + '/public'));
</code></pre>
<h3 id="5-mongodb">5、mongodb</h3>
<p>链接mongoDB数据库。基本就两个步骤：首先链接数据库，封装了一个单例，解决多次链接问题。然后创建数据库model用于数据库的增删改查操作。</p>
<pre><code class="language-js">const MongoDB = require('mongodb');
const MongoClient = MongoDB.MongoClient;
const ObjectID = MongoDB.ObjectID;
const Config = require('./config.js');

class Db {
    static getInstance() { /** 单例 解决多次实例化实例不共享问题 */
        if (!Db.instance) {
            Db.instance = new Db();
        }
        return Db.instance;
    }

    constructor() {  /** 实例化时连接数据库 */
        this.dbClient = '';
        this.connect();
    }

    connect() { //连接数据库
        return new Promise((resolve, reject) =&gt; {
            if (!this.dbClient) {
                /** 解决数据库多次连接问题 */
                MongoClient.connect(Config.dBUrl, (err, client) =&gt; {
                    if (err) {
                        reject(err)
                    } else {
                        this.dbClient = client.db(Config.dbName);
                        resolve(this.dbClient);
                    }
                });
            } else {
                resolve(this.dbClient)
            }
        })
    }

    find(collectionName, json1, json2, json3) {
        // 查询逻辑
     }

    update(collectionName, json1, json2) {
        // 修改逻辑
    }

    insert(collectionName, json) {
        // 插入逻辑
    }

    remove(collectionName, json) {
        // 删除逻辑
    }

    getObjectId(id) {
        return new ObjectID(id)
    }

    //统计数量的方法
    count(collectionName, json) {
        return new Promise((resolve, reject) =&gt; {
            this.connect().then(db =&gt; {
                let result = db.collection(collectionName).count(json);
                result.then(count =&gt; {
                    resolve(count)
                })
            })
        })
    }
}
</code></pre>
<h2 id="四-项目启动">四、项目启动</h2>
<p>1、首先启动MongoDB ---&gt; mongod.exe --dbpath D:\mongodb\data(路径)；<br>
2、启动npm脚本命令 npm dev;</p>
<h2 id="五-心得">五、心得</h2>
<p>通过简单项目学习一点Node.js的后端知识，包括NoSql的基础增删改查操作，了解后端操作，方便配合时沟通合作。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebSocket/socket.io的学习使用]]></title>
        <id>https://liucien.github.io/post/webscoket-de-xue-xi-shi-yong/</id>
        <link href="https://liucien.github.io/post/webscoket-de-xue-xi-shi-yong/">
        </link>
        <updated>2019-06-06T14:33:05.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-基础概念">一、基础概念</h2>
<p>web的实时推送技术，在WebSocket出现之前，为了实现推送功能通常采用的方案是轮询。WebSocket协议本质上是一个基于TCP的 独立的协议，能够在浏览器和服务器之间建立双向连接，以基于事件的方式，赋予浏览器实时通信能力。根据慕课网的课程实现了火拼俄罗斯方块的<a href="https://github.com/liucien/webScoket-t">demo</a>从而学习了WebScoket的基础知识。</p>
<p>socket.io封装 了websocket，同时包含了其它的连接方式，比如Ajax。原因在于不是所有的浏览器都支持websocket(ps：都现在这年代了还有不支持的么🤣)。Socket.io支持4种协议：<strong>WebSocket、htmlfile、xhr-polling、jsonp-polling</strong>，它会自动根据浏览器选择适合的通讯方式。</p>
<h2 id="二-入门基础视频">二、入门<a href="https://www.imooc.com/learn/861">基础视频</a></h2>
<h2 id="三-原生websocket事件方法">三、原生WebSocket事件/方法</h2>
<table>
<thead>
<tr>
<th>事件</th>
<th>事件处理程序</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>open</td>
<td>Socket.onopen</td>
<td>建立 socket 连接时触发这个事件</td>
</tr>
<tr>
<td>message</td>
<td>Socket.onmessage</td>
<td>客户端从服务器接收数据时触发</td>
</tr>
<tr>
<td>error</td>
<td>Socket.onerror</td>
<td>连接发生错误时触发</td>
</tr>
<tr>
<td>close</td>
<td>Socket.onclose</td>
<td>连接被关闭时触发</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Socket.send()</td>
<td>send(data) 方法使用连接传输数据。</td>
</tr>
<tr>
<td>Socket.close()</td>
<td>close() 方法用于终止任何现有连接。</td>
</tr>
</tbody>
</table>
<h2 id="四-socketio">四、socket.io</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>socket.once</td>
<td>只监听一次，接收到服务器端发来的内容，回调函数执行完毕后，取消监听</td>
</tr>
<tr>
<td>socket.on</td>
<td>持续监听，接收到服务器端发来的内容</td>
</tr>
<tr>
<td>socket.emit</td>
<td>互相发送事件</td>
</tr>
</tbody>
</table>
<h2 id="五-示例">五、示例</h2>
<h3 id="服务端">服务端</h3>
<pre><code class="language-js">var app = require('http').createServer()
var io = require('socket.io')(app);

// 发起事件监听
io.on('connection', function (socket) {
    // 事件处理
})
</code></pre>
<h3 id="客户端">客户端</h3>
<pre><code class="language-js">var Local = function (socket) {
    // 本地控制逻辑
})
var Remote = function (socket) {
    // 远程socket调用
})
</code></pre>
<pre><code class="language-js">var socket = io('ws://localhost:3002'); // 链接地址
var local = new Local(socket);
var remote = new Remote(socket); 

socket.on('waiting', function (str) {
    document.getElementById('waiting').innerHTML = str; // 等待载入
})
</code></pre>
<h2 id="六-总结">六、总结</h2>
<p>知识储备+1😂，封装过后的socket.io从使用方面简洁了不少，懂得on/emit的事件就能简单做个示例出来。加上namespace做到事件区域隔离也很方便。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter 简单使用]]></title>
        <id>https://liucien.github.io/post/flutter-shi-yong-xin-de/</id>
        <link href="https://liucien.github.io/post/flutter-shi-yong-xin-de/">
        </link>
        <updated>2019-05-23T07:07:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-基础概念">一、基础概念</h2>
<p>Flutter 一个Google推出的移动端跨端框架，基于Skin制作了一个高性能的渲染引擎来绘制widget。学习了一下，完成了一个基于彩票网的API彩票查询的<a href="https://github.com/liucien/flutter_lottery">demo</a>，此示例仅用于学习，简单做个记录。</p>
<h2 id="二-入门基础视频">二、入门<a href="https://www.bilibili.com/video/BV15t411U7yf">基础视频</a></h2>
<h2 id="三-基础组件">三、基础组件</h2>
<h3 id="widget最基础的根元素差不多就是html-css">widget：最基础的根元素，差不多就是HTML + CSS；</h3>
<h3 id="appbarapp-导航栏">AppBar：App 导航栏；</h3>
<h3 id="tab标签栏">Tab：标签栏</h3>
<h3 id="tabbarview跟tab配合实现切换">TabBarView：跟Tab配合，实现切换；</h3>
<h3 id="image-container-text类似img-div-span">Image、Container、Text：类似img、div、span</h3>
<h3 id="center居中">Center：居中</h3>
<h3 id="flex弹性布局">Flex：弹性布局</h3>
<h3 id="row水平线性布局">Row：水平线性布局</h3>
<h3 id="column垂直线性布局">Column：垂直线性布局</h3>
<h3 id="listview展示列表数据">ListView：展示列表数据</h3>
<br>
<h2 id="四-示例代码">四、示例代码</h2>
<h3 id="入口函数">入口函数</h3>
<p>相当于<code>&lt;App /&gt;</code>入口</p>
<pre><code class="language-dart">void main () =&gt; runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '大乐透查询',
      theme: ThemeData(
        primaryColor: Color(0xffe73030),
      ),
      home: HomePage(),
    );
  }
}
</code></pre>
<h3 id="首页">首页</h3>
<pre><code class="language-dart">import 'package:flutter/maimport './mas_all.dart';
import './msg_local.dart';

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() =&gt; _HomePageState();
}

class _HomePageState extends State&lt;HomePage&gt; {
  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: AppBar(
          // backgroundColor: Colors.orangeAccent,
          title: TabBar(
            tabs: [
              Tab(text: '全国'),
              Tab(text: '地方'),
            ],
            indicatorColor: Color(0xffe73030),
            isScrollable:true,
          ),
        ),
        body: TabBarView(
          children: [
            AllMsg(), // 列表页
            LocalMsg(),
          ],
        ),
      ),
    );
  }
}
</code></pre>
<h3 id="列表">列表</h3>
<pre><code class="language-dart">class _AllMsgState extends State&lt;AllMsg&gt; {
    @override
  Widget build(BuildContext context) {
    return Container(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: &lt;Widget&gt;[
          Container(
            padding: EdgeInsets.all(10),
            child: Text('开奖时间  每周一、三、六 20：30'),
          ),
          _divBorder(),
          NearestNum(), //最近开奖
          _divBorder(),
          _imgsWidget(),
          _divBorder(),
          PastNums()
        ],
      ),
    );
  }
}
</code></pre>
<h2 id="五-总结">五、总结</h2>
<p>对于前端来说Flutter入门门槛不高，但是要直接使用做项目的话要会点原生的知识，dart的学习最好是会点JAVA或者TS，这样比较容易理解里面的泛型、强类型、注解等等一些概念。主要写起来越写越会变得面条状，把样式跟模块拆出来会好一点，但是还是感觉嵌套很多，特别是学习小示例的时候，简直想死，不知道以后会不会有直接使用JS开发Flutter的框架出现（一切能用JS实现必将使用JS实现🤣），就当知识储备了，不知道以后有没有机会用😅。最后：<strong>科学上网很重要！！！</strong>，不然环境都搭不起来。</p>
]]></content>
    </entry>
</feed>