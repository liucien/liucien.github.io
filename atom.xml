<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liucien.github.io</id>
    <title>Gridea</title>
    <updated>2021-05-10T16:45:28.232Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liucien.github.io"/>
    <link rel="self" href="https://liucien.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://liucien.github.io/images/avatar.png</logo>
    <icon>https://liucien.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[从输入url到页面显示发生了什么？]]></title>
        <id>https://liucien.github.io/post/cong-shu-ru-url-dao-ye-mian-xian-shi-fa-sheng-liao-shi-me/</id>
        <link href="https://liucien.github.io/post/cong-shu-ru-url-dao-ye-mian-xian-shi-fa-sheng-liao-shi-me/">
        </link>
        <updated>2021-04-17T14:59:01.000Z</updated>
        <content type="html"><![CDATA[<p>前言：本来是不想写这个了，网上的文章实在是太多了，但是今天公司内部开了个前后端交互的分享会，对这块有所涉及，但是讲的比较基础，还是决定从<a href="https://mp.weixin.qq.com/s/2sESudqe8nsH-n7Mm-tYZA">转转前端的这篇文章入手</a>进行梳理下</p>
<h3 id="一-简单流程">一、简单流程</h3>
<p><code>1.</code>输入URL；<br>
<code>2.</code>浏览器处理输入信息，根据输入的是什么判断是url还是搜索条件；<br>
<code>3.</code>输入的是url，开始导航，发起URL请求；<br>
<code>4.</code>请求完成，重定向至页面；<br>
<code>5.</code>读取页面文档信息，准备渲染进程；<br>
<code>6.</code>页面解析DOM树加载，CSSOM树加载，script脚本加载，各项静态资源加载；<br>
<code>7.</code>一切顺利，各项阻塞流程都完成加载，成功展示页面；</p>
<h3 id="二-浏览器的多进程架构">二、浏览器的多进程架构</h3>
<table>
<thead>
<tr>
<th>进程</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>浏览器进程</td>
<td>主要负责界面显示、用户交互、子进程管理，同时提供存储等功能</td>
</tr>
<tr>
<td>渲染进程</td>
<td>将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都运行在该进程中</td>
</tr>
<tr>
<td>GPU进程</td>
<td>用来实现 3D CSS 效果，webgl、绘制网页、Chrome 的 UI 界面</td>
</tr>
<tr>
<td>网络进程</td>
<td>负责页面的网络资源加载</td>
</tr>
<tr>
<td>插件进程</td>
<td>负责插件的运行</td>
</tr>
</tbody>
</table>
<h3 id="三-请求流程">三、请求流程<img src="https://liucien.github.io/post-images/1620664474898.png" alt="" loading="lazy"></h3>
<h3 id="四-准备渲染进程">四、准备渲染进程</h3>
<p>此时文档数据正在网络进程中，还没有提交给渲染进程</p>
<h3 id="五-提交文档">五、提交文档</h3>
<p>html数据进入渲染进程</p>
<ul>
<li>浏览器进程收到网络进程的响应头数据后，向渲染进程发起提交文档的消息</li>
<li>渲染进程收到后，会和网络进程建立传输数据的管道</li>
<li>数据传输完后，渲染进程会返回确认提交的信息给浏览器进程</li>
</ul>
<h3 id="六-进入浏览器渲染">六、进入浏览器渲染</h3>
<p>文档被提交后，导航流程就结束了，渲染进程便开始页面解析和子资源加载。</p>
<p>如上图所示，输入的是 HTML、CSS、JavaScript 数据，这些数据经过中间渲染模块的处理，最终输出为屏幕上的像素，这样的处理流程叫做渲染流水线。</p>
<p>按照渲染的时间顺序，渲染流水线可以分成下面几个阶段：构建 DOM 树、样式计算、布局阶段、分层、绘制、光栅化和合成。<br>
<img src="https://liucien.github.io/post-images/1620664898503.png" alt="" loading="lazy"></p>
<h4 id="1-构建-dom-树">1、构建 DOM 树</h4>
<h4 id="2-样式计算">2、样式计算</h4>
<h4 id="3-构建脚本不进行async与defer的脚本会阻塞渲染">3、构建脚本（不进行async与defer的脚本会阻塞渲染）</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebSocket/socket.io的学习使用]]></title>
        <id>https://liucien.github.io/post/webscoket-de-xue-xi-shi-yong/</id>
        <link href="https://liucien.github.io/post/webscoket-de-xue-xi-shi-yong/">
        </link>
        <updated>2020-10-24T14:33:05.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-基础概念">一、基础概念</h2>
<p>web的实时推送技术，在WebSocket出现之前，为了实现推送功能通常采用的方案是轮询。WebSocket协议本质上是一个基于TCP的 独立的协议，能够在浏览器和服务器之间建立双向连接，以基于事件的方式，赋予浏览器实时通信能力。根据慕课网的课程实现了火拼俄罗斯方块的<a href="https://github.com/liucien/webScoket-t">demo</a>从而学习了WebScoket的基础知识。</p>
<p>socket.io封装 了websocket，同时包含了其它的连接方式，比如Ajax。原因在于不是所有的浏览器都支持websocket(ps：都现在这年代了还有不支持的么🤣)。Socket.io支持4种协议：<strong>WebSocket、htmlfile、xhr-polling、jsonp-polling</strong>，它会自动根据浏览器选择适合的通讯方式。</p>
<h2 id="二-入门基础视频">二、入门<a href="https://www.imooc.com/learn/861">基础视频</a></h2>
<h2 id="三-原生websocket事件方法">三、原生WebSocket事件/方法</h2>
<table>
<thead>
<tr>
<th>事件</th>
<th>事件处理程序</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>open</td>
<td>Socket.onopen</td>
<td>建立 socket 连接时触发这个事件</td>
</tr>
<tr>
<td>message</td>
<td>Socket.onmessage</td>
<td>客户端从服务器接收数据时触发</td>
</tr>
<tr>
<td>error</td>
<td>Socket.onerror</td>
<td>连接发生错误时触发</td>
</tr>
<tr>
<td>close</td>
<td>Socket.onclose</td>
<td>连接被关闭时触发</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Socket.send()</td>
<td>send(data) 方法使用连接传输数据。</td>
</tr>
<tr>
<td>Socket.close()</td>
<td>close() 方法用于终止任何现有连接。</td>
</tr>
</tbody>
</table>
<h2 id="四-socketio">四、socket.io</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>socket.once</td>
<td>只监听一次，接收到服务器端发来的内容，回调函数执行完毕后，取消监听</td>
</tr>
<tr>
<td>socket.on</td>
<td>持续监听，接收到服务器端发来的内容</td>
</tr>
<tr>
<td>socket.emit</td>
<td>互相发送事件</td>
</tr>
</tbody>
</table>
<h2 id="五-示例">五、示例</h2>
<h3 id="服务端">服务端</h3>
<pre><code class="language-js">var app = require('http').createServer()
var io = require('socket.io')(app);

// 发起事件监听
io.on('connection', function (socket) {
    // 事件处理
})
</code></pre>
<h3 id="客户端">客户端</h3>
<pre><code class="language-js">var Local = function (socket) {
    // 本地控制逻辑
})
var Remote = function (socket) {
    // 远程socket调用
})
</code></pre>
<pre><code class="language-js">var socket = io('ws://localhost:3002'); // 链接地址
var local = new Local(socket);
var remote = new Remote(socket); 

socket.on('waiting', function (str) {
    document.getElementById('waiting').innerHTML = str; // 等待载入
})
</code></pre>
<h2 id="六-总结">六、总结</h2>
<p>知识储备+1😂，封装过后的socket.io从使用方面简洁了不少，懂得on/emit的事件就能简单做个示例出来。加上namespace做到事件区域隔离也很方便。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于Three.js的魔方小游戏学习记录]]></title>
        <id>https://liucien.github.io/post/ji-yu-threejs-de-mo-fang-xiao-you-xi-xue-xi-ji-lu/</id>
        <link href="https://liucien.github.io/post/ji-yu-threejs-de-mo-fang-xiao-you-xi-xue-xi-ji-lu/">
        </link>
        <updated>2020-08-02T14:51:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-学习目的">一、学习目的</h2>
<p>出于对3D图形方面的兴趣，借由three.js框架先对3D方面进行一波简单的学习。此项目学习资源来源于<a href="https://juejin.cn/book/6844733759326158861">掘金小册</a>。</p>
<h2 id="二-目录结构">二、目录结构</h2>
<p>├── adapter 适配器文件<br>
├── image 贴图图片<br>
├── js 贴图图片<br>
│       ├── object 逻辑<br>
│       ├── three    <a href="https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene">three库</a><br>
│       ├── tween    <a href="http://www.createjs.cc/tweenjs/">tween动画库</a><br>
│       └── main.js 应用主文件<br>
├── game.js     入口文件<br>
├── game.json<br>
└── project.config.json     项目配置文件</p>
<h2 id="三-基本概念">三、基本概念</h2>
<h3 id="1-渲染器成像作用">1、渲染器：成像作用</h3>
<ul>
<li>WebGLRenderer使用 WebGL 技术；</li>
<li>CanvasRenderer使用 Canvas 2D 技术；</li>
<li>CSS2DRenderer和CSS3DRenderer则是使用 CSS 技术；<br>
调用new THREE.WebGLRenderer()即可创建一个 WebGL 渲染器对象</li>
</ul>
<pre><code class="language-js">new THREE.WebGLRenderer({
        antialias : true//抗锯齿开启
    });
</code></pre>
<h3 id="2-相机">2、相机</h3>
<ul>
<li>在three.js中相机一般使用右手坐标系；</li>
<li>透视投影相机，类似人眼，满足<strong>近大远小</strong>规则，PerspectiveCamera；</li>
<li>正交投影相机，即平行投影根据角度决定展示形式，大小不变，OrthographicCamera；<br>
<img src="https://liucien.github.io/post-images/1617293719156.jpg" alt="" loading="lazy"></li>
</ul>
<h3 id="3-光源">3、光源</h3>
<ul>
<li>方向光：模拟太阳光照射正方体的例子中可以看到对于任意平行的平面，方向光照射的亮度都是相同的，DirectionalLight<br>
<img src="https://liucien.github.io/post-images/1617294107277.gif" alt="" loading="lazy"></li>
<li>聚光灯：手电筒能够朝着一个方向投射类似圆锥形的光线，SpotLight<br>
<img src="https://liucien.github.io/post-images/1617294177152.jpg" alt="" loading="lazy"><br>
-点光源：点光源则类似于灯泡，其发出的光线照到物体表面的亮度是线性递减的，因此离点光源距离越远的物体会显得越暗，PointLight<br>
<img src="https://liucien.github.io/post-images/1617294247122.jpg" alt="" loading="lazy"><br>
-环境光：阴影位置的光，环境光只有一个颜色性质，AmbientLight</li>
</ul>
<h3 id="4-物体几何体-模型">4、物体：几何体、模型</h3>
<ul>
<li>自带的几何体：在计算机中构建 3D 物体也是如此，只不过采用的是连接三个顶点组成三角形的方式而已，这个三角形在计算机图形学中被称为三角形网格。网格面数越多，物体越精细，但同时会消耗更多的存储空间以及计算机性能；</li>
<li>模型：由特定的 3D 软件设计制作并导出模型素材，可以使用纹理贴图/法线贴图（资源消耗小），也可以直接使用精模（资源消耗大）；</li>
</ul>
<h3 id="5-场景以上4个关键因素的舞台">5、场景：以上4个关键因素的舞台！</h3>
<h2 id="四-webgl基础知识">四、WebGL基础知识</h2>
<h3 id="1-片元可简单理解为像素点">1、片元：可简单理解为像素点</h3>
<figure data-type="image" tabindex="1"><img src="https://liucien.github.io/post-images/1618128851406.png" alt="" loading="lazy"></figure>
<h3 id="2-着色器">2、着色器</h3>
<table>
<thead>
<tr>
<th>类型</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>顶点着色器</td>
<td>用来处理物体轮廓的程序</td>
</tr>
<tr>
<td>片元着色器</td>
<td>用来处理物体材质和纹理的程序</td>
</tr>
</tbody>
</table>
<h3 id="3-相机投影作用将三维场景投影到二维屏幕">3、相机：投影作用，将三维场景投影到二维屏幕</h3>
<h3 id="4-光源">4、光源</h3>
<h3 id="5-物体">5、物体</h3>
<h3 id="6-渲染">6、渲染</h3>
<h2 id="五-静态魔方">五、静态魔方</h2>
<h3 id="1-适配浏览器环境">1、适配浏览器环境</h3>
<p><a href="https://github.com/finscn/weapp-adapter">adapter库</a></p>
<pre><code class="language-js">import '/adapter/index.js'; 
</code></pre>
<h3 id="2-初始化主逻辑mainjs">2、初始化主逻辑<a href="https://github.com/liucien/three_game/blob/master/js/main.js">main.js</a></h3>
<p>初始化内容包含：渲染器、相机、光源、物体、场景等五要素及渲染函数。</p>
<h3 id="3-渲染魔方rubikjs">3、渲染魔方<a href="https://github.com/liucien/three_game/blob/master/js/object/Rubik.js">Rubik.js</a></h3>
<p>1、由Canvas 图案生成纹理，即：把 Canvas 元素直接传入到Texture对象中；<br>
2、根据纹理申城材质(MeshLambertMaterial)；<br>
3、根据各个小方块的中心点组成魔方；<br>
4、在main.js中渲染魔方；</p>
<pre><code class="language-js">import BasicRubik from 'object/Rubik.js'

initObject() {
    const rubik = new BasicRubik(this); // 初始化魔方对象
    rubik.model();
}
</code></pre>
<h2 id="六-魔方转动">六、魔方转动</h2>
<h3 id="1-确定触摸点">1、确定触摸点</h3>
<p>通过wx对象获取触摸事件</p>
<pre><code class="language-js">//触控事件
  initEvent() {
    wx.onTouchStart(this.touchStart.bind(this)); //开始触摸
    wx.onTouchMove(this.touchMove.bind(this)); //触摸移动
    wx.onTouchEnd(this.touchEnd.bind(this)); // 触摸结束
  }
</code></pre>
<h3 id="2-确定转动方向">2、确定转动方向</h3>
<p>根据触控事件中的move的偏移量决定转动方向</p>
<pre><code class="language-js">  touchMove(event) {
    let touch = event.touches[0];
    if (this.touchLine.isActive) { //滑动touchline
      this.touchLine.move(touch.clientY);
      let frontPercent = touch.clientY / window.innerHeight;
      let endPercent = 1 - frontPercent;
      this.rubikResize(frontPercent, endPercent);
    } else {
      this.getIntersects(event);
      if (!this.isRotating &amp;&amp; this.startPoint &amp;&amp; this.intersect) { //滑动点在魔方上且魔方没有转动
        this.movePoint = this.intersect.point;
        //equals() 检查该向量和v3的严格相等性。
        if (!this.movePoint.equals(this.startPoint)) { //触摸点和滑动点不一样则意味着可以得到滑动方向
          this.rotateRubik();
        }
      }

      if (!this.isRotating &amp;&amp; this.startPoint &amp;&amp; !this.intersect) { //触摸点没在魔方上
        this.movePoint = new THREE.Vector2(touch.clientX, touch.clientY);
        if (!this.movePoint.equals(this.startPoint)) {
          this.rotateView();
        }
      }
    }
  }
</code></pre>
<h3 id="3-制作转动动画">3、制作转动动画</h3>
<p>制作转动动画的过程中使用 requestAnimationFrame</p>
<pre><code class="language-js">rotateMove(cubeIndex, direction, callback, totalTime) {
    var self = this;
    totalTime = totalTime ? totalTime : this.defaultTotalTime;
    var elements = this.getBoxs(cubeIndex, direction);
    requestAnimationFrame(function (timestamp) {
        self.rotateAnimation(elements, direction, timestamp, 0, 0, function () {
            self.updateCubeIndex(elements);
            if (callback) {
                callback();
            }
        }, totalTime);
    });
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Koa + MongoDB开发CMS内容管理系统学习记录]]></title>
        <id>https://liucien.github.io/post/koa-mongodb-kai-fa-cms-nei-rong-guan-li-xi-tong-xue-xi-ji-lu/</id>
        <link href="https://liucien.github.io/post/koa-mongodb-kai-fa-cms-nei-rong-guan-li-xi-tong-xue-xi-ji-lu/">
        </link>
        <updated>2019-06-21T14:31:48.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-学习目的">一、学习目的</h2>
<p>个人学习项目，该项目视频来源于<a href="https://www.itying.com/goods-800.html">IT营</a>，此项目主要示范如何使用koa搭建后端项目，并使用mongoDB作为数据存储，并完成增删改查。<a href="https://github.com/liucien/CMS-koa">demo地址</a>，主要以node.js学习为主，前端使用的art模板。</p>
<h2 id="二-目录结构">二、目录结构</h2>
<p>├── models                  数据库模型目录<br>
│   ├── config.js           数据库链接配置<br>
│   ├── db.js                 实例化连接数据库<br>
│   └── tools.js             工具函数<br>
├── routes                    应用路由目录<br>
│   ├── admin               业务逻辑<br>
│   ├── admin.js<br>
│   ├── api.js<br>
│   └── index.js<br>
├── public                  静态资源<br>
├── views                   视图<br>
│   ├── admin             后台页面<br>
│   └── default            前端页面<br>
├── app.js                应用主文件<br>
├── package.json<br>
└── package-lock.json</p>
<h2 id="三-主要模块">三、主要模块</h2>
<h3 id="1-art-template-koa-art-template">1、art-template 、koa-art-template</h3>
<p>模板引擎</p>
<pre><code class="language-js">const render = require('koa-art-template');
//配置模板引擎
render(app, {
    root: path.join(__dirname, 'views'),
    extname: '.html',
    debug: process.env.NODE_ENV !== 'production',
    dateFormat:dateFormat=function(value){
        //设置日期格式
        return sd.format(new Date(value), 'YYYY-MM-DD HH:mm');
    } /*扩展模板里面的方法*/
});
</code></pre>
<h3 id="2-koa-router">2、koa-router</h3>
<p>路由处理模块，koa-router是koa的路由处理中间件，请求示例</p>
<pre><code class="language-js">const router = require('koa-router')();

router.get('/', async ctx =&gt; {
    ctx.body = {
        success:true,
        message:'请求成功'
    }
});
//post请求
router.post('/testPost',async ctx =&gt; {
    ctx.body = {
        success:true,
        message:'请求成功'
    }
});
//put请求
router.put('/testPost',async ctx =&gt; {
    ctx.body = {
        success:true,
        message:'请求成功'
    }
});
//delete请求
router.delete('/testPost',async ctx =&gt; {
    ctx.body = {
        success:true,
        message:'请求成功'
    }
});
</code></pre>
<h3 id="3-koa-bodyparser">3、koa-bodyparser</h3>
<p>使用koa-bodyparser解析post请求发送的body内容：</p>
<pre><code class="language-js">const bodyParser = require('koa-bodyparser');
app.use(bodyParser());
</code></pre>
<h3 id="4-koa-static">4、koa-static</h3>
<p>koa-static是koa的一个静态资源处理中间件，一般用它指定项目中的某个目录为静态资源目录</p>
<pre><code class="language-js">const static = require('koa-static');
//配置静态资源中间件
// app.use(static('.'));//不安全形式
app.use(static(__dirname + '/public'));
</code></pre>
<h3 id="5-mongodb">5、mongodb</h3>
<p>链接mongoDB数据库。基本就两个步骤：首先链接数据库，封装了一个单例，解决多次链接问题。然后创建数据库model用于数据库的增删改查操作。</p>
<pre><code class="language-js">const MongoDB = require('mongodb');
const MongoClient = MongoDB.MongoClient;
const ObjectID = MongoDB.ObjectID;
const Config = require('./config.js');

class Db {
    static getInstance() { /** 单例 解决多次实例化实例不共享问题 */
        if (!Db.instance) {
            Db.instance = new Db();
        }
        return Db.instance;
    }

    constructor() {  /** 实例化时连接数据库 */
        this.dbClient = '';
        this.connect();
    }

    connect() { //连接数据库
        return new Promise((resolve, reject) =&gt; {
            if (!this.dbClient) {
                /** 解决数据库多次连接问题 */
                MongoClient.connect(Config.dBUrl, (err, client) =&gt; {
                    if (err) {
                        reject(err)
                    } else {
                        this.dbClient = client.db(Config.dbName);
                        resolve(this.dbClient);
                    }
                });
            } else {
                resolve(this.dbClient)
            }
        })
    }

    find(collectionName, json1, json2, json3) {
        // 查询逻辑
     }

    update(collectionName, json1, json2) {
        // 修改逻辑
    }

    insert(collectionName, json) {
        // 插入逻辑
    }

    remove(collectionName, json) {
        // 删除逻辑
    }

    getObjectId(id) {
        return new ObjectID(id)
    }

    //统计数量的方法
    count(collectionName, json) {
        return new Promise((resolve, reject) =&gt; {
            this.connect().then(db =&gt; {
                let result = db.collection(collectionName).count(json);
                result.then(count =&gt; {
                    resolve(count)
                })
            })
        })
    }
}
</code></pre>
<h2 id="四-项目启动">四、项目启动</h2>
<p>1、首先启动MongoDB ---&gt; mongod.exe --dbpath D:\mongodb\data(路径)；<br>
2、启动npm脚本命令 npm dev;</p>
<h2 id="五-心得">五、心得</h2>
<p>通过简单项目学习一点Node.js的后端知识，包括NoSql的基础增删改查操作，了解后端操作，方便配合时沟通合作。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter 简单使用]]></title>
        <id>https://liucien.github.io/post/flutter-shi-yong-xin-de/</id>
        <link href="https://liucien.github.io/post/flutter-shi-yong-xin-de/">
        </link>
        <updated>2019-05-23T07:07:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-基础概念">一、基础概念</h2>
<p>Flutter 一个Google推出的移动端跨端框架，基于Skin制作了一个高性能的渲染引擎来绘制widget。学习了一下，完成了一个基于彩票网的API彩票查询的<a href="https://github.com/liucien/flutter_lottery">demo</a>，此示例仅用于学习，简单做个记录。</p>
<h2 id="二-入门基础视频">二、入门<a href="https://www.bilibili.com/video/BV15t411U7yf">基础视频</a></h2>
<h2 id="三-基础组件">三、基础组件</h2>
<h3 id="widget最基础的根元素差不多就是html-css">widget：最基础的根元素，差不多就是HTML + CSS；</h3>
<h3 id="appbarapp-导航栏">AppBar：App 导航栏；</h3>
<h3 id="tab标签栏">Tab：标签栏</h3>
<h3 id="tabbarview跟tab配合实现切换">TabBarView：跟Tab配合，实现切换；</h3>
<h3 id="image-container-text类似img-div-span">Image、Container、Text：类似img、div、span</h3>
<h3 id="center居中">Center：居中</h3>
<h3 id="flex弹性布局">Flex：弹性布局</h3>
<h3 id="row水平线性布局">Row：水平线性布局</h3>
<h3 id="column垂直线性布局">Column：垂直线性布局</h3>
<h3 id="listview展示列表数据">ListView：展示列表数据</h3>
<br>
<h2 id="四-示例代码">四、示例代码</h2>
<h3 id="入口函数">入口函数</h3>
<p>相当于<code>&lt;App /&gt;</code>入口</p>
<pre><code class="language-dart">void main () =&gt; runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '大乐透查询',
      theme: ThemeData(
        primaryColor: Color(0xffe73030),
      ),
      home: HomePage(),
    );
  }
}
</code></pre>
<h3 id="首页">首页</h3>
<pre><code class="language-dart">import 'package:flutter/maimport './mas_all.dart';
import './msg_local.dart';

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() =&gt; _HomePageState();
}

class _HomePageState extends State&lt;HomePage&gt; {
  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: AppBar(
          // backgroundColor: Colors.orangeAccent,
          title: TabBar(
            tabs: [
              Tab(text: '全国'),
              Tab(text: '地方'),
            ],
            indicatorColor: Color(0xffe73030),
            isScrollable:true,
          ),
        ),
        body: TabBarView(
          children: [
            AllMsg(), // 列表页
            LocalMsg(),
          ],
        ),
      ),
    );
  }
}
</code></pre>
<h3 id="列表">列表</h3>
<pre><code class="language-dart">class _AllMsgState extends State&lt;AllMsg&gt; {
    @override
  Widget build(BuildContext context) {
    return Container(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: &lt;Widget&gt;[
          Container(
            padding: EdgeInsets.all(10),
            child: Text('开奖时间  每周一、三、六 20：30'),
          ),
          _divBorder(),
          NearestNum(), //最近开奖
          _divBorder(),
          _imgsWidget(),
          _divBorder(),
          PastNums()
        ],
      ),
    );
  }
}
</code></pre>
<h2 id="五-总结">五、总结</h2>
<p>对于前端来说Flutter入门门槛不高，但是要直接使用做项目的话要会点原生的知识，dart的学习最好是会点JAVA或者TS，这样比较容易理解里面的泛型、强类型、注解等等一些概念。主要写起来越写越会变得面条状，把样式跟模块拆出来会好一点，但是还是感觉嵌套很多，特别是学习小示例的时候，简直想死，不知道以后会不会有直接使用JS开发Flutter的框架出现（一切能用JS实现必将使用JS实现🤣），就当知识储备了，不知道以后有没有机会用😅。最后：<strong>科学上网很重要！！！</strong>，不然环境都搭不起来。</p>
]]></content>
    </entry>
</feed>